
npm install -g npm@latest
npm install -g @angular/cli@latest
npm install --save bootstrap@3
npm install

Emmet: for auto complete feature and shotcuts
https://docs.emmet.io/cheat-sheet/

Additionally, when using a project created with Angular CLI 6+ (check via ng -v ), 
you'll have an angular.json  file instead of an .angular-cli.json  file. 
In that file, you still need to add Bootstrap to the styles[]  array as shown in the next video, 
but the path should be 
node_modules/bootstrap/dist/css/bootstrap.min.css , NOT ../node_modules/bootstrap/dist/css/bootstrap.min.css . 
The leading ../  must not be included.

#Create New Project
ng new RecipeBookProject
#Install bootstrap
npm install --save bootstrap@3
#Add below bootstrap file in angular.json
node_modules/bootstrap/dist/css/bootstrap.min.css
#Start application
ng serve

ng g c header --spec false
ng g c recipes --spec false
ng g c recipes/recipe-list --spec false
ng g c recipes/recipe-detail --spec false
ng g c recipes/recipe-list/recipe-item --spec false
ng g c shopping-list --spec false
ng g c shopping-list/shopping-edit --spec false
ng g directive shared/dropdown --spec false
ng g c recipes/recipe-start --spec false
ng g c recipes/recipe-edit --spec false

#To use old rxjs imports, below package need to be installed
npm install --save rxjs-compat

#More details can be found on Observables
reactivex.io/rxjs

#Uninstall compat re remove compatibility of older rxjs and remove all import with "import {<anypackage>} from 'rsjs';
npm uninstall --save rxjs-compat

----------------------------- Event Binding --------------------------------------
##Event Binding implementation to display Recipe or Shopping-List
#Step1: click event listeners added to header section on Recipe and Shopping-List	
	#header.component.html
	<li><a href="#" (click)="onSelect('recipe')">Recipes</a></li>
    <li><a href="#" (click)="onSelect('shopping-list')">Shopping List</a></li>
	
	#event emitter added to listen to the event and emit the event to other component
	#header component.ts
	@Output() featureSelected = new EventEmitter<string>();
	onSelect(feature: string){
		this.featureSelected.emit(feature);
	}
#Step2: Liten to the event emitted from click even previously created  that "featureSelected"
	#app.component.html
	<app-header (featureSelected)="onNavigation($event)" ></app-header>
	<app-recipes *ngIf="loadedFeature === 'recipe'"></app-recipes>
    <app-shopping-list *ngIf="loadedFeature !== 'recipe'"></app-shopping-list>
	
	#app.component.ts
	loadedFeature: string = 'recipe';
	
	onNavigation(feature: string){
	   this.loadedFeature = feature;
	}
----------------------------- Event Binding Ended --------------------------------------
----------------------------- Property Binding -----------------------------------------
#Data binding happened from "Recipe List" component to "Recipe Item" Component
	#Binded or passed data from Parent Component to Child Component with data binding
	#recipe-item.component.ts
	@Input() recipe: Recipe;
	
	#recipe-list.component.html
	<app-recipe-item *ngFor="let recipeItem of recipes" [recipe]=recipeItem></app-recipe-item>	
----------------------------- Property Binding Ended------------------------------------
----------------------------- Local Refs with @ViewChild -------------------------------
#passing value using local-ref(#nameInput, ) and @ViewChild parent to child component
	#shopping-edit.component.html
	<input type="text" id="name" class="form-control" #nameInput >
	<input type="number" id="amount" class="form-control" #amountInput >
	
	#
	@ViewChild('nameInput') nameInputRef: ElementRef;
	@ViewChild('amountInput') amountInputRef: ElementRef;
	  onAddItem(){
		const ingName = this.nameInputRef.nativeElement.value;
		const ingAmount = this.amountInputRef.nativeElement.value;
		const newIngredient = new Ingredient(ingName, ingAmount);
		this.ingredientAdded.emit(newIngredient);
	  }
----------------------------- Local Refs with @ViewChild End ----------------------------	
#Routers implementation
#app-router.module.ts
const appRoutes: Routes = [
    { path: '', redirectTo: '/recipes', pathMatch: 'full'},
    { path: 'recipes', component: RecipesComponent},
    { path: 'shopping-list', component: ShoppingListComponent}
];
#app.component.html, it will decide which component to load based on router Component and selected router
<router-outlet></router-outlet>
#header.component.html, "routerLinkActive" enables current tab highlight feature
<li routerLinkActive="active"><a routerLink="/recipes" >Recipes</a></li>
<li routerLinkActive="active"><a routerLink="/shopping-list">Shopping List</a></li>

#Fetching data from router link
#Below one will load only one time on click of route
const recipeId = this.route.snapshot.params['id'];
#To load data dynamically we need to subscribe to the router data



	

	

